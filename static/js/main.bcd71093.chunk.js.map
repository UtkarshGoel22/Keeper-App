{"version":3,"sources":["components/Header.jsx","components/Note.jsx","components/Footer.jsx","components/CreateArea.jsx","components/App.jsx","index.js"],"names":["Header","Note","props","className","title","content","onClick","onDelete","id","Footer","currentYear","Date","getFullYear","CreateArea","useState","isExpanded","setExpanded","note","setNote","handleChange","event","target","name","value","prevNote","onChange","placeholder","rows","Zoom","in","Fab","onAdd","preventDefault","App","notes","setNotes","deleteNote","prevNotes","filter","noteItem","index","newNote","map","ReactDOM","render","document","getElementById"],"mappings":"yLAOeA,MAJf,WACI,OAAO,iCAAQ,+BAAI,cAAC,IAAD,IAAJ,mB,iBCcJC,MAff,SAAcC,GAMV,OACI,sBAAKC,UAAU,OAAf,UACI,6BAAKD,EAAME,QACX,4BAAIF,EAAMG,UACV,wBAAQC,QAPhB,WACIJ,EAAMK,SAASL,EAAMM,KAMjB,SAA8B,cAAC,IAAD,UCN3BC,MALf,WACI,IAAMC,GAAc,IAAIC,MAAOC,cAC/B,OAAO,iCAAQ,iDAAsBF,Q,iDC2D1BG,MA1Df,SAAoBX,GAEhB,MAAkCY,oBAAS,GAA3C,mBAAOC,EAAP,KAAmBC,EAAnB,KAGA,EAAwBF,mBAAS,CAC7BV,MAAO,GACPC,QAAS,KAFb,mBAAOY,EAAP,KAAaC,EAAb,KAMA,SAASC,EAAaC,GAElB,MAAsBA,EAAMC,OAArBC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAEbL,GAAQ,SAAAM,GACJ,OAAO,2BAEAA,GAFP,kBAGKF,EAAOC,OAwBpB,OACI,8BACI,uBAAMpB,UAAU,cAAhB,UACKY,GAAe,uBAAOO,KAAK,QAAQG,SAAUN,EAAcI,MAAON,EAAKb,MAAOsB,YAAY,UAC3F,0BAAUJ,KAAK,UAAUhB,QARrC,WACIU,GAAY,IAOsCS,SAAUN,EAAcI,MAAON,EAAKZ,QAASqB,YAAY,iBAAiBC,KAAMZ,EAAa,EAAI,IAE3I,cAACa,EAAA,EAAD,CAAMC,GAAId,EAAV,SAEI,cAACe,EAAA,EAAD,CAAKxB,QAzBrB,SAAoBc,GAChBlB,EAAM6B,MAAMd,GAEZC,EAAQ,CACJd,MAAO,GACPC,QAAS,KAIbe,EAAMY,kBAgBM,SAA0B,cAAC,IAAD,cCZ/BC,MAtCf,WAEI,MAA0BnB,mBAAS,IAAnC,mBAAOoB,EAAP,KAAcC,EAAd,KAWA,SAASC,EAAW5B,GAEhB2B,GAAS,SAAAE,GAEL,OAAOA,EAAUC,QAAO,SAACC,EAAUC,GAC/B,OAAOA,IAAUhC,QAK7B,OACI,gCACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAYuB,MArBpB,SAAiBU,GAEbN,GAAS,SAAAE,GACL,MAAM,GAAN,mBAAWA,GAAX,CAAsBI,UAsBrBP,EAAMQ,KAAI,SAACH,EAAUC,GAClB,OAAO,cAAC,EAAD,CAAkBhC,GAAIgC,EAAOpC,MAAOmC,EAASnC,MAAOC,QAASkC,EAASlC,QAASE,SAAU6B,GAA9EI,MAEtB,cAAC,EAAD,QCnCZG,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.bcd71093.chunk.js","sourcesContent":["import React from 'react';\nimport NotesIcon from '@material-ui/icons/Notes';\n\nfunction Header() {\n    return <header><h1><NotesIcon />Keeper App</h1></header>\n}\n\nexport default Header;","import React from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nfunction Note(props) {\n    // function to call the deleteNote function in App.jsx\n    // which was passed as a prop (onDelete). \n    function handleClick() {\n        props.onDelete(props.id);\n    }\n    return (\n        <div className=\"note\">\n            <h1>{props.title}</h1>\n            <p>{props.content}</p>\n            <button onClick={handleClick}><DeleteIcon /></button>\n        </div>\n    );\n}\n\nexport default Note;","import React from 'react';\n\nfunction Footer() {\n    const currentYear = new Date().getFullYear();\n    return <footer><p>Copyrights &copy; {currentYear}</p></footer>\n}\n\nexport default Footer;","import React, { useState } from 'react';\nimport AddIcon from '@material-ui/icons/Add';\nimport Fab from '@material-ui/core/Fab';\nimport Zoom from '@material-ui/core/Zoom';\n\nfunction CreateArea(props) {\n\n    const [isExpanded, setExpanded] = useState(false);\n\n    // to store the current note object.\n    const [note, setNote] = useState({\n        title: \"\",\n        content: \"\"\n    });\n\n    // function which handle changes made in input and textarea.\n    function handleChange(event) {\n        // destructuring name and value attributes of the element that triggerd the event.\n        const {name, value} = event.target;\n        // function to update the state of note.\n        setNote(prevNote => {\n            return {\n                // using spread operator for previous values\n                ...prevNote,\n                [name]: value\n            }\n        })\n    }\n\n    // function to call the addNote function in App.jsx\n    // which was passed as a prop (onAdd). \n    function submitNote(event) {\n        props.onAdd(note);\n        // clearing the state of note.\n        setNote({\n            title: \"\",\n            content: \"\"\n        });\n        // preventing the default behavior of form as\n        // they refresh after being submitted\n        event.preventDefault();\n    }\n\n    // function to set state of isExpanded to true\n    function expand() {\n        setExpanded(true);\n    }\n\n    return (\n        <div>\n            <form className=\"create-note\">\n                {isExpanded && (<input name=\"title\" onChange={handleChange} value={note.title} placeholder=\"Title\"/>)}\n                <textarea name=\"content\" onClick={expand} onChange={handleChange} value={note.content} placeholder=\"Take a note...\" rows={isExpanded ? 3 : 1}></textarea>\n                {/* Zoom effect of button */}\n                <Zoom in={isExpanded}>\n                    {/* Floating action button */}\n                    <Fab onClick={submitNote}><AddIcon /></Fab>\n                </Zoom>\n            </form>\n        </div>\n    );\n}\n\nexport default CreateArea;","import React, { useState } from 'react';\nimport Header from './Header';\nimport Note from './Note';\nimport Footer from './Footer';\nimport CreateArea from './CreateArea'\n\nfunction App() {\n    // array to store all the notes.\n    const [notes, setNotes] = useState([]);\n\n    // function to add note in the array \n    function addNote(newNote) {\n        //console.log(note);\n        setNotes(prevNotes => {\n            return [...prevNotes, newNote];\n        });\n    }\n\n    // function to delete note in the array\n    function deleteNote(id) {\n        //console.log(\"Delete was triggered\");\n        setNotes(prevNotes => {\n            // using filter function to remove the note from notes array\n            return prevNotes.filter((noteItem, index) => {\n                return index !== id;\n            });\n        });\n    }\n\n    return (\n        <div>\n            <Header />\n            <CreateArea onAdd={addNote}/>\n            {/* using map function to iterate over the notes array.\n            Returning a note component for each noteItem.\n            Also sending information in the form of props. */}\n            {notes.map((noteItem, index) => {\n                return <Note key={index} id={index} title={noteItem.title} content={noteItem.content} onDelete={deleteNote}/>\n            })}\n            <Footer />\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App'\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}